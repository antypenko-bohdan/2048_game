const t=new class{constructor(t=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]){this.initialBoard=t,this.board=JSON.parse(JSON.stringify(t)),this.boardScore=0,this.currentStatus="idle",this.isAbleToMove=!0,this.isGameActive=!1,this.isGameWon=!1,this.isGameLost=!1}moveLeft(){this.isGameActive&&this.moveTo("left")}moveRight(){this.isGameActive&&this.moveTo("right")}moveUp(){this.isGameActive&&this.moveTo("up")}moveDown(){this.isGameActive&&this.moveTo("down")}getScore(){return this.boardScore}getState(){return this.board}getStatus(){switch(!0){case this.isGameWon:this.currentStatus="win";break;case this.isGameLost:this.currentStatus="lose";break;case this.isGameActive:this.currentStatus="playing";break;default:this.currentStatus="idle"}return this.currentStatus}start(){this.board=JSON.parse(JSON.stringify(this.initialBoard)),this.isGameActive=!0,this.placeNewCell(),this.placeNewCell()}restart(){this.board=JSON.parse(JSON.stringify(this.initialBoard)),this.boardScore=0,this.currentStatus="idle",this.isGameActive=!1,this.isGameWon=!1,this.isGameLost=!1}placeNewCell(){let t,e;do t=Math.floor(4*Math.random()),e=Math.floor(4*Math.random());while(0!==this.board[t][e])this.board[t][e]=this.createCell()}createCell(){return .1>Math.random()?4:2}moveTo(t){if(!this.isGameActive)return;let e=this.board[0].length,s=JSON.parse(JSON.stringify(this.board)),i=0,r=t=>t[0].map((e,s)=>t.map(t=>t[s])),a=t=>t.map(t=>t.slice().reverse()),o=t=>t.map(t=>{let s=t.filter(t=>0!==t);s=[...Array(e-s.length).fill(0),...s];for(let t=s.length;t>=0;t--)s[t-1]===s[t]&&(s[t-1]*=2,s[t]=0,i+=s[t-1],t--);return[...Array(e-(s=s.filter(t=>0!==t)).length).fill(0),...s]}),l=()=>{for(let t=0;t<4;t++)for(let e=0;e<4;e++)if(0===this.board[t][e])return!1;for(let t=0;t<4;t++)for(let e=0;e<4;e++)if(e<3&&this.board[t][e]===this.board[t][e+1]||t<3&&this.board[t][e]===this.board[t+1][e])return!1;return this.isGameActive=!1,this.isGameLost=!0,!0},h=t=>{if(JSON.stringify(t)!==JSON.stringify(s)){if(this.board=t,s=t,this.board.flat().includes(2048)){this.isGameActive=!1,this.isGameWon=!0,this.getStatus();return}this.placeNewCell(),l()||(this.isAbleToMove=!1)}};switch(t){case"up":h(r(a(o(a(r(s)))))),this.boardScore+=i;break;case"down":h(r(o(r(s)))),this.boardScore+=i;break;case"right":h(o(s)),this.boardScore+=i;break;case"left":h(a(o(a(s)))),this.boardScore+=i}}},e=document.querySelector(".container"),s=e.querySelector(".button"),i=e.querySelector(".message-start"),r=e.querySelector(".message-lose"),a=e.querySelector(".message-win"),o=e.querySelector(".game-score");function l(){let s=t.getState().flat();e.querySelectorAll(".field-cell").forEach((t,e)=>{let i=t.classList;for(let e of i)"field-cell"!==e&&(i.remove(e),t.textContent="");0!==s[e]&&(t.classList.add(`field-cell--${s[e]}`),t.textContent=s[e])}),o.textContent=t.getScore(),"lose"===t.getStatus()?r.classList.remove("hidden"):"win"===t.getStatus()&&a.classList.remove("hidden")}s.addEventListener("click",()=>{"Start"===s.textContent?(t.start(),s.textContent="Restart",s.classList.add("restart"),s.classList.remove("start")):(t.restart(),s.textContent="Start",s.classList.add("start"),s.classList.remove("restart")),i.classList.add("hidden"),r.classList.add("hidden"),a.classList.add("hidden"),l()}),document.addEventListener("keydown",e=>{switch(e.key){case"ArrowUp":t.moveUp();break;case"ArrowDown":t.moveDown();break;case"ArrowLeft":t.moveLeft();break;case"ArrowRight":t.moveRight()}l()});
//# sourceMappingURL=index.0a922af8.js.map
